
Section 1:

Iterations are repeating the same action.

Metrics:
http_req_duration: most important
p(90) = percentile: 90 % 

service level objective:
available 99.8% of time

############################################################
Section 2:

Performance testing

Load test:
with multiple users
Stress test - to breaking point
Spike test - unexpected big load

What are the set goals?


Scaling: 
vertical scaling - single server more mem or cpu
horizontal scaling - add more servers
monolithic difficult to scale horizontally
micorservices easy to scale horizontally

Smoke test:
basic functionality of application not performance test 
i.e. just one user with limited script. 
Also some baseline values from metrics

check http_req_failed status
http_req_duration probably best value

Load testing:
test under typical load. 
maybe for around 30 minutes
ramp up users with time delay waiting
ramp up stage - 10% of test 
stay at value -
ramp down stage - 10% of test
aim has performance degraded in comparison with previous value. i.e. run when changes happens to sw or infrastrucutre.

Stress test:
higher than normal load
based on historical data
if bad performance at full load does it get better at ramp down
run load test first

Spike test:
sudden incresae in load
Maybe four times what you have for the stress test.
Not ran on a regular basis
If a big event is coming up.

Breakpoint testing:
gradually increase load until the application breaks
maximum capacity of application
after load and stress
not very useful in an elastic environment where scaling takes place.

Soak testing:
endurance test, a load test for a longer duration. 
run after load test

#########################################################

Section 3:
Metrics:
counters,
rate, (percentage)
trend, (stats mean/average etc)
gauge (check value)

https://grafana.com/docs/k6/latest/using-k6/metrics/reference/

If the count for a http_reqs is double rememeber there may be a redirect in there somewhere
"k6 counts every actual HTTP request under the hood, and redirects often sneak in an "extra" one if youâ€™re not watching closely. Adding the trailing slash is a simple but effective fix."


https://mockbin.io/ mocks endpoints.

curl -X POST -H "Content-Type: application/json" -d '{"message": "Hello World"}' https://dbe2276de4a14a50be58f8e4d10ddae5.api.mockbin.io/ --200 response
curl -X POST -H "Content-Type: application/json" -d '{"message": "Hello World"}' https://8983b0e0bb944791a33d5e3e4ad6635e.api.mockbin.io/ --201 response

tags:
https://grafana.com/docs/k6/latest/using-k6/tags-and-groups/

 k6 run .\groups.js --summary-mode=full
 k6 run .\groups.js --summary-mode=legacy
  
to see different stats
  
###################################################################
Section 4:

Make REST API calls with K6. 

This section uses a local instance of https://github.com/grafana/test-api.k6.io which is started with docker compose up

Lives at http://localhost:8000/

k6 run --http-debug="full"  .\http-get.js for more debug info 

Check for 301 Moved Permanently response. If this is received then K6 will do a redirect.

Put is update

Patch is  partial update.

########################################################

Section 5:

Pass in environment variables via CLI.

k6 run -e BASE_URL=http://localhost:8000 env-var.js

Sleep for random amounts simulates more realistic VU behaviour.

In k6, a SharedArray is a way to load data once and share it across all virtual users (VUs) in a test. 
This helps reduce memory usage and improve performance, especially when working with large datasets like CSV files or arrays of test data.

K6 has external library for csv processing from papaparse

#######################################################

Section 6:

Running testing in the grafana cloud.

K6 cloud login --token <token>

k6 cloud <file-name>

Note execution print out states 'cloud'

Possibly to run locally and push results to cloud by line below:

k6 run <file-name> -o cloud

This points the output link to grafana cloud.

Note file k6-test-api.js is run against the local API and the results pushed as I believe the public API does not exist anymore.

Cloud insights are at https://grafana.com/docs/grafana-cloud/testing/k6/analyze-results/get-cloud-insights/

##############################################################

Section 7: 

CLI options

k6 run script.js --vus 1 --duration 10s --iteration 1
k6 run script.js --insecure-skip-tls-verify allows self signed certificates
k6 run script.js --summary-export=summary.json 
k6 run script.js --out  json=full_results.json 

flags overwrite code options 

https://grafana.com/docs/k6/latest/using-k6/k6-options/how-to/

https://grafana.com/docs/k6/latest/using-k6/k6-options/reference/

See live dashboard and generate html output
set "K6_WEB_DASHBOARD=true" & set "K6_WEB_DASHBOARD_EXPORT=k6-report.html" & k6 run script.js

https://grafana.com/docs/k6/latest/results-output/web-dashboard/#web-dashboard


##############################################################

